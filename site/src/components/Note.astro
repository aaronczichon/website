---
import markdownit from 'markdown-it';

const { item } = Astro.props;

const md: markdownit = markdownit({
	highlight: (str: string, lang: string) => {
		return `<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;"><code style="padding-left: 8px;">${md.utils.escapeHtml(str)}</code></pre>`;
	},
});
md.renderer.rules.image = (tokens, idx, options, env, self) => {
	const token = tokens[idx];
	if (!token || !token.attrs) {
		return self.renderToken(tokens, idx, options);
	}
	let src = token.attrs[token.attrIndex('src')][1];

	if (src.startsWith('https://directus.aaronczichon.de/assets')) {
		src += '?quality=80&width=800';
	}

	token.attrs[token.attrIndex('src')][1] = src;
	return self.renderToken(tokens, idx, options);
};

const getFormattedDate = (date: string) => {
	const d = new Date(date);
	const browserLang = Astro.currentLocale;
	return `${d.toLocaleDateString(browserLang)} ${d.toLocaleTimeString(browserLang, { timeStyle: 'short' })}`;
};
---

<li class="note-list-item">
  <article>
    <a href={`#${item.id}`} target="_blank">
      <h3 id={item.id}>{item.title}</h3>
    </a>
    <p class="note-list-item--time">{getFormattedDate(item.date_created)}</p>
    <p set:html={md.render(item.text)} />
    <hr />
  </article>
</li>

<script is:inline define:vars={{ id: item.id }}>
  /**
   * Extract the hash link from URL and check if it matches the item id
   */
  const applyActiveClass = () => {
    const hash = location.hash.replace("#", "");
    return hash && parseInt(hash) === id ? "note-list-item--active" : "";
  };

  const hashClass = applyActiveClass();
  if (!hashClass) return;
  const listElement = document.getElementById(id).closest("li");
  listElement.classList.add(hashClass);
</script>
